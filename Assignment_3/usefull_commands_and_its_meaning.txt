~command
yacc parser.y -d -v
lex lexer.l
gcc y.tab.c -ll
./a.out < test.c explain each comand;


    yacc parser.y -d -v
        yacc is a tool used to generate parsers for context-free grammars. parser.y is the input file that contains the grammar rules for the language you want to parse.
        -d tells yacc to generate a header file (y.tab.h) that contains token definitions and other declarations.
        -v generates a verbose description of the parsing process, which can be helpful for debugging.

    lex lexer.l
        lex is a tool used to generate lexical analyzers (tokenizers) for text files. lexer.l is the input file that contains rules for recognizing and tokenizing the input source code into individual tokens.
        This command generates a C program (usually named lex.yy.c) that recognizes and processes the input source code.

    gcc y.tab.c -ll
        gcc is the GNU Compiler Collection, a compiler for the C programming language.
        y.tab.c is the output file generated by yacc containing the parser code.
        -ll tells gcc to link the generated parser with the Lex library, which is necessary for the proper functioning of the lexical analyzer.

    ./a.out < test.c
        ./a.out is the name of the executable file generated after compiling your parser and lexer.
        < test.c redirects the contents of the test.c file into the standard input of the a.out executable. This means that the parser will read and parse the contents of test.c.

In summary, these commands are used to generate a parser and lexer for a programming language, compile them, and then test the parser by parsing the test.c file using the generated executable. This process is common when developing compilers or interpreters for new programming languages.


-- Yacc reads the grammar descriptions in parser.y and generates a parser, function
-- yyparse, in file y.tab.c.
-- Included in file parser.y are token declarations. 
-- These are converted to constant definitions by yacc and placed in file y.tab.h.
-- Lex reads the pattern descriptions in lexer.l, includes file y.tab.h, 
-- and generates a lexical analyzer, function yylex, in file lex.yy.c.
--Finally, the lexer and parser are compiled and linked together to form the executable,
bas.exe. 
--From main, we call yyparse to run the compiler.
-- Function yyparse automatically calls yylex to obtain each token.